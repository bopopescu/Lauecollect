' This program is to translate the sample for a Laue crystallography experiment
' synchronously to an external trigger signal.
' The maximum trigger rate is 82 Hz.
' The tranlations is trigger by a rising edge at the digital input 0.

' LCLS combined X-ray shutter and attenuator operation:

' When the level of input "close/open" is TTL high the shutter in open position.
' If it is low in closed or attenuated position.
' When level "full/atten." input is TTL high the attenuator is inserted.
' Otherwise, it is in closed position.
' Input "close/open" high overrides input "full/atten." high.

' Setup: 
' FPGA sample trans, -> Breakout box, Digital input 0 -> Ensemble X Opto-In Pin 2
' FPGA X-ray shut.   -> Breakout box, Digital input 1 -> Ensemble X Opto-In Pin 3
' FPGA X-ray att.   - > Breakout box, Digital input 2 -> Ensemble X Opto-In Pin 4

' Friedrich Schotte, NIH, 18 Apr 2013 - 31 Jan 2016'
' 31 Jan 2016 merged "TriggeredMotion.ab" and "Attenuator.ab"

HEADER
  INCLUDE "StringLibHeader.abi"
  ' Global string registers
  DEFINE PROGRAM_NAME 0
  ' Global integer register numbers.
  DEFINE TRIGGER_ENABLED 0
  DEFINE AUTO_RETURN 1 'automatically return to start at end of travel
  DEFINE AUTO_REVERSE 2 'automatically return to start at end of travel
  DEFINE TIMER_ENABLED 3 'Move stage on a timer?
  DEFINE TRIGGER_COUNT 4 'number of trigger events detected
  DEFINE NSTEPS 6 'number of X,Y,Z coordinates to use
  DEFINE STEP_COUNT 7 'current position number
  DEFINE TIMER_VALUE 8 'current value of timer in units of ms
  DEFINE TIMER_COUNT 9 'current value of timer in units of ms
  DEFINE NAXES 10 'How many axis to use?
  DEFINE INT_ARRAY00 11 'start of interger arrays
  DEFINE AXIS_ENABLED_I 0 'Do triggered motion on this axis? order of array
  DEFINE RELATIVE_MOVE_I 1 'Interpret coordinates as incremental? order of array
  DEFINE TRIGGER_DIVISOR_I 2 'Sub-divide trigger frequency? order of array
  DEFINE AXIS_NSTEPS_I 3 'Per-axis number of steps? order of array
  ' Global double register numbers.
  DEFINE VERSION 0
  DEFINE TIMER_PERIOD 4 'timer period in ms
  DEFINE POS00 5 'first position for the first axis, start of an n_axes x N array
END HEADER

DECLARATIONS
  GLOBAL timer_period AS DOUBLE 'timer period on ms  
END DECLARATIONS

PROGRAM
  ' Initialize X-ray shutter/attenuator
  DIM open_pos,closed_pos,attenuated_pos AS DOUBLE
  DIM open_close_speed AS DOUBLE 
  DIM current_pos AS DOUBLE
  DIM open_level,att_level AS INTEGER ' digital input states
  
  SETPARM msShut_ext, DefaultRampRate, 500000 ' in deg/s2
  attenuated_pos = 56.0
  closed_pos = 63.0 ' normal closed position in open/close mode in deg
  open_pos = 70.0 ' in deg
  open_close_speed = 7200 ' top speed in deg/s

  ' Initialize Sample Translation
  DIM last_level AS INTEGER 'digital input state
  DIM trigged_step AS INTEGER 'Was last move done on external trigger?
  'DIM x1 as DOUBLE, y1 as DOUBLE, z1 as DOUBLE 'current position
  DIM i AS INTEGER ' current position number
  DIM level AS INTEGER 'digital input state
  DIM t,dt AS INTEGER 'time in milliseconds
  DIM Nt,last_Nt AS INTEGER 'time in number of timer periods
  DIM do_step AS INTEGER 'Start motion?
  DIM bits AS INTEGER,enabled AS INTEGER,homed AS INTEGER 'Axis status bits
  DIM n_axes AS INTEGER,pos AS DOUBLE,relative_move AS INTEGER
  DIM step_count AS INTEGER
  DIM axis_enabled AS INTEGER, axis_nsteps AS INTEGER, divisor AS INTEGER
  DIM name AS STRING, version AS DOUBLE
  name = SGLOBAL(PROGRAM_NAME)
  IF name <> "TriggeredMotion" OR DGLOBAL(VERSION) <> 6.0 THEN
    'Initialize global variables
    SGLOBAL(PROGRAM_NAME) = "TriggeredMotion"
    DGLOBAL(VERSION) = 6.0
    IGLOBAL(AUTO_RETURN) = 1 'automatically return to start at end of travel
    IGLOBAL(AUTO_REVERSE) = 0 'automatically reverse direction at end of travel
    IGLOBAL(TRIGGER_ENABLED) = 0 'move stage on external trigger
    IGLOBAL(TIMER_ENABLED) = 0 'move stage on a timer  
    IGLOBAL(NSTEPS) = 0 'number of triggered steps operations
    DGLOBAL(TIMER_PERIOD) = 24.0 'timer period in ms  
    IGLOBAL(TRIGGER_COUNT) = 0 'number of trigger events detected
    IGLOBAL(STEP_COUNT) = 0 'number of triggered steps operations
    IGLOBAL(TIMER_COUNT) = 0
    IGLOBAL(NAXES) = 6 'how many axes to use? 
    n_axes = IGLOBAL(NAXES)
    FOR iaxis = 0 TO n_axes-1
      IGLOBAL(INT_ARRAY00+AXIS_ENABLED_I*n_axes+iaxis) = 0 'Use this axis?
	  IGLOBAL(INT_ARRAY00+RELATIVE_MOVE_I*n_axes+iaxis) = 0 'Do incr. move?
	  IGLOBAL(INT_ARRAY00+TRIGGER_DIVISOR_I*n_axes+iaxis) = 1 'Sub-divide trigger frequency?
	  IGLOBAL(INT_ARRAY00+AXIS_NSTEPS_I*n_axes+iaxis) = 0 'per-axis number of steps
    NEXT isaxis
    FOR i = POS00 to 256
      DGLOBAL(i) = 0
    NEXT i
  END IF


  CLEARTIMER 'Reset the timer to 0 to indicate the program uptime.             
  'PLANE 0 'for coordinated moved using the LINEAR command
  'ABS 'for the LINEAR command: LINEAR uses absolute coordinates.
  WAIT MODE NOWAIT 'After a motion command, do not wait for it to complete.
  SCURVE 0 'Set ramp portion of velocity profile to fully linear.

  ' Read digital inputs (on AUX I/O connector)
  last_level = DIN(X,1,0)
  last_Nt = 0

  WHILE 1
    ' X-ray shutter/Attenuator
    ' Read digital inputs
    open_level = DIN(X,1,1) 'Close/open input (0 = closed, 1 = open)
    att_level = DIN(X,1,2) 'Annuator input (0 = closed, 1 = attenuated)
	current_pos = PCMD(msShut_ext)
    IF open_level = 1 THEN
	  IF current_pos != open_pos THEN
        MOVEABS msShut_ext open_pos F open_close_speed 
	  END IF
    ELSEIF att_level = 1 THEN
	  IF current_pos != attenuated_pos THEN
        MOVEABS msShut_ext attenuated_pos F open_close_speed 
	  END IF
    ELSE
	  IF current_pos != closed_pos THEN
        MOVEABS msShut_ext closed_pos F open_close_speed 
	  END IF
    END IF

    ' Sample Translation
	do_step = 0
    IF IGLOBAL(TRIGGER_ENABLED) THEN
      ' Read digital inputs (on AUX I/O connector)
      level = DIN(X,1,0)
      'DOUT X,1,level ' Timing marker for debugging
	  IF level = 1 AND last_level = 0 THEN
		do_step = 1
	  END IF 
	  IF do_step THEN IGLOBAL(TRIGGER_COUNT) = (IGLOBAL(TRIGGER_COUNT)+1) END IF
	  last_level = level
	END IF
	IGLOBAL(TIMER_VALUE) = TIMER()
	IF IGLOBAL(TIMER_ENABLED) THEN
	  t = IGLOBAL(TIMER_VALUE)
	  dt = DGLOBAL(TIMER_PERIOD)
	  IGLOBAL(TIMER_COUNT) = t/dt
	  if IGLOBAL(TIMER_COUNT) <> last_Nt THEN do_step = 1 END IF
      last_Nt = IGLOBAL(TIMER_COUNT)
	END IF
    ' On the rising edge of input 1, operated the stage momentarily advancing
    ' one step.
    IF do_step THEN
	  step_count = IGLOBAL(STEP_COUNT)
	  n_axes = IGLOBAL(NAXES)
	  FOR iaxis = 0 TO n_axes-1
	    i = step_count
	    axis_enabled = IGLOBAL(INT_ARRAY00+AXIS_ENABLED_I*n_axes+iaxis)
		IF axis_enabled THEN
	      divisor = IGLOBAL(INT_ARRAY00+TRIGGER_DIVISOR_I*n_axes+iaxis)
		  IF divisor = 0 THEN divisor = 1 END IF
		  IF i/divisor*divisor == i THEN 
		    i = i / divisor
            axis_nsteps = IGLOBAL(INT_ARRAY00+AXIS_NSTEPS_I*n_axes+iaxis)
            IF axis_nsteps > IGLOBAL(NSTEPS) THEN axis_nsteps = IGLOBAL(NSTEPS) END IF
		    IF IGLOBAL(AUTO_RETURN) THEN i = i - i/axis_nsteps*axis_nsteps END IF
		    IF i < axis_nsteps THEN
	          pos = DGLOBAL(POS00+i*n_axes+iaxis)
		      'pos = pos: check for NaN
		      IF AXISFAULT(@iaxis) = 0 AND pos = pos THEN
	            relative_move = IGLOBAL(INT_ARRAY00+RELATIVE_MOVE_I*n_axes+iaxis)
		        IF NOT relative_move THEN
	              MOVEABS @iaxis pos
		        ELSE
		          MOVEINC @iaxis pos
	            END IF
			  END IF
			END IF
  		  END IF
		END IF
	  NEXT isaxis
	  IGLOBAL(STEP_COUNT) = IGLOBAL(STEP_COUNT)+1
    END IF
  WEND
END PROGRAM
