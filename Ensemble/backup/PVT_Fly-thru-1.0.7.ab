' PVT commands are queued in a FIFO buffer of length 16. Use HALT to 
' hold off execution of the PVT commands until a START command is issued.
' To ensure the FIFO buffer is not overwritten, the 14th PVT command 
' automatically triggers a START. Hence, to properly synchronize
' the motion, the START command must be issued before the 14th PVT 
' command is queued in the FIFO buffer. 

' In AeroBasic, arrays are indexed from 0 to N, i.e., A(1) has two elements

'INCLUDE "PP.abi": Peristaltic Pump Look-up Table -> GLOBAL PP(9,499)
'	The first dimension, specified by PP_index, selects the pumping speed.
'	When PP_index = 0, pump is linear (50 equal steps per 50-step period).
'	When PP_index > 0, pump is nonlinear (N unequal steps per 50-step period).
'	The number of subdivisions per 50 step period is given by:
'		SS_array() AS INTEGER = {50,500,250,100,50,20,10,5,2,1}
HEADER
	INCLUDE "PP.abi" 
END HEADER

DECLARATIONS
	GLOBAL PrintString AS STRING(120)
	GLOBAL Zpos AS DOUBLE
	GLOBAL Z_mid AS DOUBLE
	GLOBAL Zvmax_RS AS DOUBLE
	GLOBAL DT_start AS DOUBLE
	GLOBAL scale_factor AS DOUBLE
	GLOBAL Ti AS DOUBLE
	GLOBAL N_mode AS INTEGER
	GLOBAL N_delay AS INTEGER
	GLOBAL N_count AS INTEGER
	GLOBAL msShut_Enable AS INTEGER	
	GLOBAL PumpA_Enable AS INTEGER
	GLOBAL N_mode_last AS INTEGER
	GLOBAL T_last AS INTEGER
	GLOBAL T_diff AS INTEGER
	GLOBAL T_current AS INTEGER
	GLOBAL Z_error_range AS DOUBLE
	
END DECLARATIONS

'Program Control parameters
'IGLOBAL(0): setting to -1 initiates orderly exit of this program
'IGLOBAL(1): setting to 1 Triggers Digitial Oscilloscope
'IGLOBAL(2): PP_index (0: linear; 1-9: nonlinear options)
'E_index: Environment Index (0: NIH; 1: APS; 2: LCLS)
'E_index is saved in and accessed from non-volatile memory (UserInteger0)
'E_index = GETPARM(UserInteger0)

PROGRAM
	DIM E_index AS INTEGER
	DIM DT_array(2) AS DOUBLE	'Period of Base frequency (in seconds)
	DIM scale_factor_array(2) AS DOUBLE	'
	DIM Open_array() AS DOUBLE = {56,9.7,56}	'Shutter open (0:NIH, 1:APS, 2:LCLS)
	DIM msShut_step_array() AS DOUBLE = {7,10,7}	'Step size to move from open to close (in degrees)
	DIM Xo AS DOUBLE, Yo AS DOUBLE, Zo AS DOUBLE	'Starting position
	DIM PumpA_pos AS DOUBLE
	DIM Npp AS INTEGER
	DIM PP_index AS INTEGER
	DIM status AS INTEGER
	DIM SS_array() AS INTEGER = {50,500,250,100,50,20,10,5,2,1} 'Steps/Stroke for PumpA
	DIM LineString AS STRING(70)
	

'Useful Commands:
'	IGLOBAL(0) = -1					'Exit program
'	IGLOBAL(1) = 1					'trigger digital oscilloscope
'	moveabs msShut_ext 9.7			'move msShut_ext to APS open position
'	moveinc PumpA -700  PumpAF 50	'retract solution from capillary 
'	moveinc PumpA 2100  PumpAF 50	'flush capillary 


	'Set operating parameters
	'E_index(Environment index): (0: NIH; 1: APS; 2: LCLS)
    E_index = GETPARM(UserInteger0)
	DZ = -0.50 'The full stroke is defined to be (DZ*N_steps) 
	N_steps = 5+39+2 '5 for LZ offset; 39 for 40 x-ray shots; 2 for acceleration/deceleration
	Z_stop = -10.5 'Stroke stops at this position 
	Z_start = Z_stop - DZ*N_steps 'Stroke starts at this position	
	N_return = 72 'Number of time steps for return stroke
	
	'Initialize DT array 
	DT_array(0) = (351.934/350.0)*0.024304558/24	'0: NIH base period  (0.0010183 based on internal oscillator for Pico23)							
	DT_array(1) = 0.024304558/24					'1: APS base period  (0.0010127 275th subharmonic of P0)
	DT_array(2) = 1.0/960							'2: LCLS base period (0.0010417 inverse of 8*120 = 960 Hz)
	
	'Initialize scale_factor_array (rescales DT to approximately match the source frequency)
	scale_factor_array(0) = 1.00000427 '1.0000018 'Pico23 
	scale_factor_array(1) = 0.9999902 'APS 2017.02.26; 0.99999084 APS 2016.11.08; 0.99999525 'APS 03/07/2016
	scale_factor_array(2) = 1.0000000 'LCLS 
	
	'Select Environment-dependent parameters
	DT_start = DT_array(E_index)
	msShut_open = open_array(E_index)
	msShut_step = msShut_step_array(E_index)
	msShut_atten = 56	'NIH/LCLS attenuated position (in degrees)
	msShut_close1 = msShut_open - msShut_step
	msShut_close2 = msShut_open + msShut_step
	scale_factor = scale_factor_array(E_index)	'If time correction is positive (us), need to decrease the scale factor.
		
	'Calculate operating parameters
	Z_mid = 0.5*(Z_start + Z_stop) 'mid-point of the stroke
	DT = scale_factor*DT_start
	Zvmax_RS = 1.5*(Z_start-Z_stop)/(N_return*DT)'peak velocity during return stroke.

	'Initial conditions
	Ti = 0.001
	LZi = 0
	Npp = 0
	Zi = Z_start
	msShut_pos = msShut_close1
	
	Plane 1
	RECONCILE X Y Z PumpA LZ msShut_ext
	
	WHILE (PLANESTATUS(1) BAND 1<<0) <> 0 'check for "Motion Active" true
		P_status = PLANESTATUS(1)
		DWELL 0.005
	WEND
	
	'Move Z, LZ, msShut_ext, and PumpA to starting positions
	ABS 'Positions specified in absolute coordinates
	WAIT MODE MOVEDONE	
	LINEAR Z Zi F10
	LINEAR LZ LZi F10
	LINEAR msShut_ext msShut_close1 F1000
	PumpA_pos = PCMD(PumpA)
	LINEAR PumpA 50*CEIL((PumpA_pos-0.01)/50) F40'Move PumpA to the next largest multiple of 50 before terminating program.	
	HOME PumpA
	PumpA_pos = PCMD(PumpA)
	
	'Set up for PVT commands
	PVT INIT TIME ABS
	VELOCITY ON
	HALT
	
	'GOTO EndOfProgram
	
	'Initialize parameters
	N_delay = 0
	N_count = 0
	Last_mode = -1
	T_current = 0
	PRINT "N_count, Mode, Z_error_range[um], pos_error[um],"
	PRINT "T_current[ms], scale_factor, T_corr[us], T_corr_sum[us]"
	PRINT "\r"

	
	PVT Z Zi,0 LZ LZi,0 PumpA PumpA_pos,0 msShut_ext msShut_pos,0 TIME Ti
	
	IGLOBAL(0) = 0
	CALL Synch()
	CLEARTIMER
	WHILE IGLOBAL(0) > -1 'enter IGLOBAL(0) = -1 to exit loop
		PP_index = IGLOBAL(2) '0 is linear; 1-9 is nonlinear
		CALL Synch() 'Read msShut_Enable, PumpA_Enable, N_mode, and N_delay	
		STARTSYNC 4 'Start motion 4 ms after CALL Synch() finishes
		IF N_mode = 10 THEN	'Flythru-4	
			'Acquire scope trace on second stroke, or when IGLOBAL(1)=1
			IF (N_count = -1) OR (IGLOBAL(1) = 1) THEN
				SCOPEBUFFER 1200
				SCOPETRIGPERIOD -4	' -4 (-2) corresponds to 4 (2) kHz
				SCOPETRIG
				IGLOBAL(1) = 0
			END IF
			M_scale = 4	
			ZV = DZ/(M_scale*DT)
			Ti = Ti + 8*DT
			Zi = Zi + DZ
			PVT Z Zi,ZV msShut_ext msShut_pos,0 TIME Ti
			Ti = Ti + 3*M_scale*DT
			Zi = Zi + 3*DZ
			PVT Z Zi,ZV msShut_ext msShut_pos,0 TIME Ti
			Ti = Ti + 2*M_scale*DT
			Zi = Zi + 2*DZ
			IF msShut_Enable = 1 THEN
				msShut_pos = msShut_open
			END IF
			PVT Z Zi,ZV msShut_ext msShut_pos,0 TIME Ti
			Ti = Ti + 39*M_scale*DT
			Zi = Zi + 39*DZ		
			PVT Z Zi,ZV msShut_ext msShut_pos,0 TIME Ti
			Ti = Ti + 8*DT
			Zi = Zi + DZ
			msShut_pos = msShut_close1			
			IF PumpA_Enable = 1 THEN				
				PVT Z Zi,0 LZ LZi,0 PumpA PumpA_pos,0 msShut_ext msShut_pos,0 TIME Ti					
				'Return Stroke
				Ti = Ti + N_return*DT + T_corr
				Zi = Z_start
				LZi = -1.0*ZV*10^(N_delay/8.0-5.0) 'LZ position for L_delay				
				IF Npp = SS_array(PP_index) THEN
					PumpA_pos = 50*FLOOR((PumpA_pos+0.01)/50)+50
					Npp = 1
				ELSE
					PumpA_pos = 50*FLOOR((PumpA_pos+0.01)/50)+PP(PP_index,Npp)
					Npp = Npp + 1
				END IF	
				PVT Z Zi,0 LZ LZi,0 PumpA PumpA_pos,0 msShut_ext msShut_pos,0 TIME Ti
				status = AXISSTATUS(PumpA) ' for debugging
			ELSE				
				PVT Z Zi,0 LZ LZi,0 msShut_ext msShut_pos,0 TIME Ti				
				'Return Stroke
				'status = AXISSTATUS(PumpA)
				'Check for 'Move Active' false and 'In Position 2' true
				'IF (status BAND (1<<3)) = 0 AND (status BAND (1<<20)) <> 0 THEN
				'  RECONCILE PumpA
				'  PumpA_pos = PLANEPOS(PumpA)
			    'END IF
				PumpA_pos = PFBK(PumpA)
				Npp = 0
				Ti = Ti + N_return*DT + T_corr
				Zi = Z_start
				LZi = -1.0*ZV*10^(N_delay/8.0-5.0) 'LZ position for L_delay
				PVT Z Zi,0 LZ LZi,0 msShut_ext msShut_pos,0 TIME Ti
			END IF						
			IF N_count = 0 THEN
				SYNC
				START 		
			END IF
			IF ((T_diff > 269) OR (T_diff < 265)) AND (N_count > 0) THEN
				PRINT "phase_error[ms]: "
				PrintString = ""
				FORMAT PrintString, "%d\r", INTV:T_diff
				PRINT PrintString
				N_count = 0
			END IF
		ELSEIF N_mode = 11 THEN	'Flythru-48				
			'Acquire scope trace on second stroke, or when IGLOBAL(1)=1
			IF (N_count = -1) OR (IGLOBAL(1) = 1) THEN
				SCOPEBUFFER 2500
				SCOPETRIGPERIOD 1	' -4 (-2) corresponds to 4 (2) kHz
				SCOPETRIG
				IGLOBAL(1) = 0
			END IF
			M_scale = 48	
			ZV = DZ/(M_scale*DT)
			Ti = Ti + 12*DT
			Zi = Zi + DZ
			PVT Z Zi,ZV msShut_ext msShut_pos,0 TIME Ti		
			Ti = Ti + 4*M_scale*DT
			Zi = Zi + 4*DZ
			PVT Z Zi,ZV msShut_ext msShut_pos,0 TIME Ti
			IF N_count = 0 THEN
				SYNC
				START 
			END IF	
			FOR i = 1 TO 20
				Ti = Ti + (M_scale-4)*DT
				Zi = Zi + (1-4.0/M_scale)*DZ
				PVT Z Zi,ZV msShut_ext msShut_pos,0 TIME Ti
				Ti = Ti + 8*DT
				Zi = Zi + (8.0/M_scale)*DZ
				IF msShut_Enable = 1 THEN
					msShut_pos = msShut_close2
				END IF
				PVT Z Zi,ZV msShut_ext msShut_pos,0 TIME Ti
				Ti = Ti + (M_scale-8)*DT
				Zi = Zi + (1-8.0/M_scale)*DZ
				PVT Z Zi,ZV msShut_ext msShut_pos,0 TIME Ti
				Ti = Ti + 8*DT
				Zi = Zi + (8.0/M_scale)*DZ
				msShut_pos = msShut_close1
				PVT Z Zi,ZV msShut_ext msShut_pos,0 TIME Ti
				Ti = Ti - 4*DT
				Zi = Zi - (4.0/M_scale)*DZ
			NEXT i			
			Ti = Ti + 12*DT
			Zi = Zi + DZ			
			IF PumpA_Enable = 1 THEN				
				PVT Z Zi,0 LZ LZi,0 PumpA PumpA_pos,0 msShut_ext msShut_pos,0 TIME Ti					
				'Return Stroke
				Ti = Ti + N_return*DT + T_corr
				Zi = Z_start
				LZi = -1.0*ZV*10^(N_delay/8.0-5.0) 'LZ position for L_delay
				IF Npp = SS_array(PP_index) THEN
					PumpA_pos = 50*FLOOR((PumpA_pos+0.01)/50)+50
					Npp = 1
				ELSE
					PumpA_pos = 50*FLOOR((PumpA_pos+0.01)/50)+PP(PP_index,Npp)
					Npp = Npp + 1
				END IF				
				PVT Z Zi,0 LZ LZi,0 PumpA PumpA_pos,0 msShut_ext msShut_pos,0 TIME Ti
				status = AXISSTATUS(PumpA) ' for debugging
			ELSE
				PVT Z Zi,0 LZ LZi,0 msShut_ext msShut_pos,0 TIME Ti
				'Return Stroke
				'status = AXISSTATUS(PumpA)
				'Check for 'move active' false and 'in position' true
				'IF (status BAND (1<<3)) = 0 AND (status BAND (1<<20)) <> 0 THEN
				'  RECONCILE PumpA
				'  PumpA_pos = PLANEPOS(PumpA)
			    'END IF
				PumpA_pos = PFBK(PumpA)
				Npp = 0
				Ti = Ti + N_return*DT + T_corr
				Zi = Z_start
				LZi = -1.0*ZV*10^(N_delay/8.0-5.0) 'LZ position for L_delay
				PVT Z Zi,0 LZ LZi,0 msShut_ext msShut_pos,0 TIME Ti
			END IF
			IF ((T_diff > 2237) OR (T_diff < 2234)) AND (N_count > 0) THEN	
				PRINT "phase_error[ms]: "
				PrintString = ""
				FORMAT PrintString, "%d\r", INTV:T_diff
				PRINT PrintString
				N_count = 0
			END IF
		END IF
		
		CALL Phase()
		N_count = N_count + 1
		Last_mode = N_mode	
	WEND
	'To ensure FIFO buffer is flushed, execute START command;
	'	without START, PLANESTATUS(1) in loop below can return 32
	'START 
	WHILE (PLANESTATUS(1) BAND 1<<0) <> 0 'check for "Motion Active" true
		P_status = PLANESTATUS(1)
		DWELL 0.005
	WEND
	
	'RECONCILE X Y Z PumpA LZ msShut_ext
	PumpA_pos = PFBK(PumpA)
	VELOCITY OFF
	LINEAR PumpA 50*CEIL((PumpA_pos-0.01)/50) F40'Move PumpA to the next largest multiple of 50 before terminating program.		
	LINEAR Z 0 F10
	LINEAR LZ 0 F10
	
	'WHILE (PLANESTATUS(1) BAND 1<<0) <> 0 'check for "Motion Active" true
	'	P_status = PLANESTATUS(1)
	'	DWELL 0.005
	'WEND
	'RECONCILE PumpA

	EndOfProgram:
END PROGRAM

FUNCTION Synch()
	DIM N_temp AS INTEGER
	
	'Decode mode parameters from trigger pulse train
	STARTSYNC -1	'corresponds to 0.5 ms clock ticks per SYNC 
	WHILE DIN(X,1,0)=0 'wait for next low-to-high transition.
		SYNC
	WEND
	'Record Zpos immediately after first rising edge
	Zpos = PCMD(Z) 
	SYNC
	SYNC
	SYNC
	SYNC
	SYNC
	SYNC
	SYNC
	'Record msShut_Enable 3.5 ms after first rising edge
	msShut_Enable = DIN(X,1,0)
	SYNC
	SYNC
	SYNC
	SYNC
	'Record PumpA_Enable 2 ms later
	PumpA_Enable = DIN(X,1,0)
	'Read 4 bits that define mode (every 2 ms)
	N_temp = 0
	FOR i = 0 TO 3	
		SYNC
		SYNC
		SYNC
		SYNC
		N_temp = N_temp + DIN(X,1,0)*2^i
	NEXT i
	N_mode = N_temp
	'Read 6 bits that define delay (every 2 ms)
	N_temp = 0
	FOR i = 0 TO 5	
		SYNC
		SYNC
		SYNC
		SYNC
		N_temp = N_temp + DIN(X,1,0)*2^i
	NEXT i
	N_delay = N_temp
	
	IF (N_mode_last != N_mode) AND (N_Count > 0) THEN
		PRINT "N_mode_changed: "
		PrintString = ""
		FORMAT PrintString, "%d\r", INTV:N_mode
		PRINT PrintString
		N_count = 0
	END IF
	N_mode_last = N_mode
	T_last = T_current
	T_current = TIMER()
	T_diff = T_current - T_last
	
END FUNCTION

FUNCTION Phase()
' Monitor and correct phase of motion(PLL)
	T_corr = 0
	IF (N_count = 0) THEN
		T_ref = Ti	'Last time used to compute scale_factor
		N_corr = 50	'Number of strokes between corrections
		Z_error_max = 0.2
		Z_error_min = -1*0.2
		Z_error_range = 0.4
		T_corr_sum = 0
		pos_error_sum = 0 'If exceeds limits, used to correct scale factor
	END IF

		IF N_count > 1 THEN
			'Maintain upper, lower limits of error; use to calculate pos_error.
			Z_error = Zpos - Z_mid 
			IF Z_error < Z_error_min THEN
				'IF Z_error < (-1*0.6*Z_error_range) THEN
				'	Z_error_min = -1*0.6*Z_error_range
				'ELSE
					Z_error_min = Z_error
				'END IF
			END IF
			IF Z_error > Z_error_max THEN
				'IF Z_error > (0.6*Z_error_range) THEN
				'	Z_error = (0.6*Z_error_range)
				'ELSE
					Z_error_max = Z_error
				'END IF
			END IF	
			pos_error = 0.5*(Z_error_max + Z_error_min)
			Z_error_range = Z_error_max - Z_error_min
			'T_corr = pos_error/Zvmax_RS
			'IF ABS(T_corr) > 0.002 THEN
			'	PRINT "Large Position Error \r"
			'	FORMAT PrintString, "%.0f\r",DBLV:1000*pos_error
			'	T_corr = 0
			'	pos_error = 0
			'END IF		
	
		IF N_count = N_corr*FLOOR(N_count/N_corr) THEN	'make correction								
			T_corr = pos_error/Zvmax_RS
			T_corr_sum = T_corr_sum + T_corr
			Z_error_max = Z_error_max - pos_error - DGLOBAL(3)
			Z_error_min = Z_error_min - pos_error + DGLOBAL(3)
			DGLOBAL(3) = 0.004
			IF Z_error_range > 1 THEN
				Z_error_max = -10
				Z_error_min = 10
				T_corr_sum = 0
				pos_error_sum = 0
			END IF
			IF (N_count > (4*N_corr)) THEN
				pos_error_sum = pos_error_sum + pos_error
				IF (abs(pos_error_sum) > 0.05) AND ((Ti - T_ref) > 300) THEN
					scale_factor = scale_factor*(1+pos_error_sum/Zvmax_RS/(Ti-T_ref))
					DT = scale_factor*DT_start
					pos_error_sum = 0
					T_ref = Ti
				END IF
			END IF
			FORMAT PrintString, "%d,%d,%.0f,%.0f,%d,%.8f,%.0f,%.0f\r",
			INTV:N_count,INTV:N_mode,DBLV:1000*Z_error_range,DBLV:1000*pos_error,INTV:T_current,DBLV:scale_factor,DBLV:1000000*T_corr,DBLV:1000000*T_corr_sum
			PRINT PrintString
		END IF
		
	END IF

END FUNCTION