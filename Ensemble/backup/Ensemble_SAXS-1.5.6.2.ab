' version 1.5.6
DECLARATIONS

    TYPE PVT_parameters	'32-bit single-precision float for position/velocity; integer for [1/0]
        Zp AS SINGLE	'Z axis position
        Zv AS SINGLE	'Z axis velocity; [-1 to 1]
        Sp AS SINGLE	'Shutter position; [-1 to 1]; 0 is open
        Sv AS SINGLE	'Shutter velocity [-1 to 1]
		L AS INTEGER	'Laser
		X AS INTEGER	'X-ray
		D AS INTEGER	'Digital Output
    END TYPE
	
	GLOBAL N_steps() AS INTEGER = {249,2405,375,189,174,45,249,372,501,618}
    GLOBAL PVD(9,618) AS PVT_parameters
	GLOBAL PP() AS SINGLE = {0,1.4,2.5,3.6,4.5,5.4,6.3,7.2,8,8.8,9.7,10.5,11.3,12.1,13,13.8,14.6,15.4,16.2,17.1,17.9,18.7,19.5,20.3,21.2,22,22.8,23.6,24.4,25.1,25.9,26.7,27.5,28.3,29,29.8,30.6,31.3,32.1,32.9,33.7,34.5,35.3,36.2,37.1,38,39,40,41.2,42.5}
	'PP is peristaltip pump vector that linearizes volume dispensed over a 50 step stroke
END DECLARATIONS

PROGRAM

	DIM PrintString AS STRING(80)
	DIM N_mode AS INTEGER
	DIM Di AS INTEGER
	DIM Itemp AS INTEGER
	
	DGLOBAL(0) = 0	' Use to keep While Loop running (-1 finishes execution)
	DGLOBAL(1) = 1' PumpA_step displaced during return stroke
	DGLOBAL(2) = 20	'# x-ray pulses transmitted in Idle mode (even number)
	
	' Initialize Zp and Sp
	FOR j = 0 TO 9
		FOR i = 0 TO 618
			PVD(j,i).Zp = -1	' -1 is a flag to suppress PVT commands
			PVD(j,i).Sp = -1	' -1 is the normal closed state (close1)
		NEXT i
	NEXT j
	
	'	Call functions to specify paramters required for the respective modes
	CALL Exotic ()
	CALL Stepping ()
	CALL Flythru ()
	
	Plane 1
	'RECONCILE Z PumpA msShut_ext
	RECONCILE Z msShut_ext
	
	T_offset = 2.2 '2.2 '0.65 'time offset in units of DT; centers msShut_ext opening on x-ray pulse
	'T_offset = 0.0

	'Timing parameters (rescale DT to approximately match the source frequency)
	'	If time correction is positive (us), need to decrease the scale factor.
	DT = 1.0047*0.024304558/24	'~1000 Hz; 275th subharmonic of P0
	'DT = 0.9999949*DT ' 06.06.2015 correction to match APS frequency; was 0.9999953
	'DT = 0.9999957*DT ' 10.27.2015 correction to match APS frequency
	'DT = 0.99999555*DT ' 10.30.2015 correction to match APS frequency
	'DT = 0.9999956*DT ' 11.5.2015 correction to match APS frequency
	DT =  0.995323*1.0000039*(351.933/350.000)*DT 'FPGA internal oscillator for Pico23
	'DT = 0.9999962*(351.933/350.000)*DT 'FPGA internal oscillator for Pico24
	'if DT is too large, stage motion shifts to right (later times)
	
	
	'Slotted Sample Cell parameters
	Nslots = 41
	DZ = 0.610		'slot separation
	Z_1 = -11.359' at APS; slot 1 position w/ cooling water set to 10 Celsius.
	Z_1 = -11.51 ' Sample cell 3 at NIH
	'Z_1 = -11.219' Sample cell 5 at APS; 
	Z_start = Z_1-DZ
	Z_end = Z_start + (Nslots+1)*DZ ' end-point of the stroke
	Z_mid = Z_start + 0.5*(Nslots+1)*DZ 'mid-point of the stroke
	Z_v = DZ/(4*DT)	'velocity of sample cell in fly-thru mode (~150 mm/s)
	Z_vmax = 1.5*(Nslots+1)*DZ/(60*DT) 'Z velocity at midpoint of return stroke (mm/s)
	
	'Axis Z parameters
	'SETGAIN <Axis>, <GainKp>, <GainKi>, <GainKpos>, <GainAff>
	'SETGAIN sets all 4 parameters synchronously
	SETGAIN Z, 1780000, 10000, 56.2, 56200 'original settings
	SETPARM Z, GainVff, 0 'original setting
	'SETGAIN Z, 1780000, 7500, 133, 5620 'New settings
	'SETPARM Z, GainVff, 3162
	
	'Millisecond shutter parameters; determined at BioCARS in Feb 2015
	'SETGAIN msShut_ext, 180900, 2621, 59, 260700
	'SETPARM msShut_ext, GainVff, 5932
	
	'Find current position of Z, msShut, and PumpA
	Z_pos = PCMD(Z)
	msShut_current = PCMD(msShut_ext)
	
	'Move PumpA to the nearest multiple of 50 before resetting to zero.
	RECONCILE Z PumpA
	PumpA_pos = PLANEPOS(PumpA)
	WAIT MODE MOVEDONE
	MOVEABS PumpA 50*FLOOR(PumpA_pos/50) F 20 
	HOME PumpA
	PumpA_pos = 0
	Npp = 0	'Npp is the number of times the PumpA was moved.
	
	'Set up ms shutter parameters; ensure msShut is set to close1.
	msShut_open = 9.7 ' Measured 03.06.2015; was 9.99 'Angle at center of opening
	msShut_step = 10.0 '14.58 '(was 8.77) 'Step angle to open/close the shutter
	msShut_close1 = msShut_open - msShut_step
	msShut_close2 = msShut_open + msShut_step

	
	DOUT X,1,0 'Ensure all bits of digital output are low when starting
	
	'Set up for PVT calls
	ABS 'Positions specified in absolute coordinates
	PVT INIT TIME ABS
	VELOCITY ON
	HALT
	
	'Wait for start of pulse pattern to synchronize start of motion
	WHILE DIN(X,1,0)=0 'wait for next low-to-high transition.
		DWELL 0.00025 
	WEND
	DWELL 0.03 'wait till after burst is over (30 ms is more than enough.
	WHILE DIN(X,1,0)=0 'wait for next low-to-high transition.
		DWELL 0.00025 
	WEND

	'Decode N_mode from trigger pulse train
	STARTSYNC 2 'query DIN(X,1,0) every 2 ms 
	Zpos = PCMD(Z)
	msShut_current = PCMD(msShut_ext)
	SYNC
	msShut_Enable = DIN(X,1,0)
	SYNC
	PumpA_Enable = DIN(X,1,0)
	j = 0
	FOR i = 0 TO 4	
		SYNC
		j = j + DIN(X,1,0)*2^i
	NEXT i
	N_mode = j	
	
	'Synchronize start (timing is mode dependent).
	
	T_0 = ((N_steps(N_mode) + 15)*4 + 6.5)*DT	' 11.04.2-15 +7 [ms] is offset to properly synchronize the start 
	Scope_Trigger_Delay = T_0 - 0.1 ' Start recording 100 ms before the start of the scan.
	Npts = 8*N_steps(N_mode)+400
	SCOPETRIGPERIOD -2 					' 0.5 ms per point
	SCOPEBUFFER  (200*CEIL(Npts/200))	'Round up to nearest 100 ms
	
	'Move motors into position to start.
	PVT Z Z_pos,0 msShut_ext msShut_current,0 PumpA PumpA_pos,0 TIME 0.001 DOUT X,1,0,1
	PVT Z Z_end,0 msShut_ext msShut_close1,0 PumpA PumpA_pos,0 TIME (T_0-60*DT) DOUT X,1,0,1
	PVT Z Z_start,0 msShut_ext msShut_close1,0 PumpA PumpA_pos,0 TIME T_0 DOUT X,1,0,1
	START

	DWELL Scope_Trigger_Delay 'Delay to synchronize scope near the start of the scan.
	SCOPETRIG
	
	k = 0
	PLL = 1
	WHILE DGLOBAL(0) > -1 'enter DGLOBAL(0) = -1 to exit loop
		l = 0
		'STARTSYNC -2
		WHILE DIN(X,1,0)=0 'wait for clk pulse 
			'SYNC 
			DWELL 0.00025
			'l=l+1
		WEND

		'Decode N_mode from trigger pulse train
		STARTSYNC 2 'query DIN(X,1,0) every 2 ms 
		Zpos = PCMD(Z)
		msShut_current = PCMD(msShut_ext)
		SYNC
		msShut_Enable = DIN(X,1,0)
		SYNC
		PumpA_Enable = DIN(X,1,0)
		j = 0
		FOR i = 0 TO 4	
			SYNC
			j = j + DIN(X,1,0)*2^i
		NEXT i
				
		Svmax = 2*msShut_step/(8*DT)	'Max S velocity is 2 time the average velocity
		Zvmax = DZ/(4*DT)				'Max Z velocity for Exotic and Fly-thru Modes
		IF j > 5 THEN
			Zvmax = 2*DZ/(12*DT)		'Max Z velocity for Stepping Modes
		END IF
		
		IF j > 1 THEN	' Not Idle nor Single-slot modes
			PumpA_step = DGLOBAL(1)	' Number of motor steps during return stroke
			FOR i = 0 TO N_steps(j)
				flag = PVD(j,i).Zp	
				IF flag > -1 THEN					
					Ti = T_0 + i*4*DT
					Zi = Z_start + DZ*PVD(j,i).Zp
					Zv = Zvmax*PVD(j,i).Zv
					IF msShut_Enable THEN
						Sp = msShut_open + msShut_step*PVD(j,i).Sp
						Sv = Svmax*PVD(j,i).Sv
						Di = -1*ABS(PVD(j,i).Sp)+1	'xray shutter open
						IF PVD(j,i).L > 0 THEN		' Laser on
							Di = Di + 2
						END IF
					ELSE
						Sp = msShut_close1
						Sv = 0
						Di = 0
					END IF
					Itemp = PVD(j,i).Zp
					IF Itemp = 1 THEN	' Trigger camera on Slot 1
						Di = Di + 4
					END IF
					PVT Z Zi,Zv msShut_ext Sp,Sv PumpA PumpA_pos,0 TIME Ti DOUT X,1,Di,15
				END IF
			NEXT i
			T_0 = T_0 + (N_steps(j) + 15)*4*DT
			Npp = Npp+PumpA_Enable
			PumpA_pos = 50*FLOOR(Npp/50)+PP(Npp-50*FLOOR(Npp/50))
			'PumpA_pos = PumpA_pos + PumpA_step*PumpA_Enable
			PVT Z Z_start,0 msShut_ext msShut_close1,0 PumpA PumpA_pos,0 TIME T_0 DOUT X,1,0,15
		ELSEIF j = 0 THEN
			' Idle mode (open/close ms_Shut_ext Npulses times)	
			IF msShut_Enable THEN
				NP = 2*FLOOR(DGLOBAL(2)/2)	' 0 <= NP(even) <= 40 
				IF NP < 0 THEN
					NP = 0
				ELSEIF NP > 40 THEN
					NP = 40
				END IF
				FOR i = 1 TO NP STEP 2
					Ti = T_0 + 24*i*DT
					PVT msShut_ext msShut_close1,0 TIME (Ti-8*DT) DOUT X,1,1,15
					PVT msShut_ext msShut_open,Svmax TIME Ti DOUT X,1,3,15
					PVT msShut_ext msShut_close2,0 TIME (Ti+8*DT) DOUT X,1,1,15
					PVT msShut_ext msShut_close2,0 TIME (Ti+16*DT) DOUT X,1,1,15
					PVT msShut_ext msShut_open,-1*Svmax TIME (Ti+24*DT) DOUT X,1,3,15
					PVT msShut_ext msShut_close1,0 TIME (Ti+32*DT) DOUT X,1,1,15
				Next i
			END IF
			T_0 = T_0 + (N_steps(j) + 15)*4*DT
			PVT msShut_ext msShut_close1,0 TIME T_0 DOUT X,1,1,15
			'RECONCILE Z PumpA msShut_ext	
		ELSEIF j = 1 THEN
				' Single-Slot mode
				Ti = T_0
				PVT Z Z_start,0 msShut_ext msShut_close2,0 PumpA PumpA_pos,0 TIME (Ti+12*DT) DOUT X,1,0,15
				FOR i = 1 TO Nslots-1 STEP 2
					Zi = Z_start + i*DZ
					Ti = T_0 + 120*DT
					PVT Z Zi,0 msShut_ext msShut_close2,0 PumpA PumpA_pos,0 TIME (Ti-60*DT) DOUT X,1,0,15
					PVT Z Zi,0 msShut_ext msShut_close2,0 PumpA PumpA_pos,0 TIME (Ti-8*DT) DOUT X,1,0,15
					PVT Z Zi,0 msShut_ext msShut_open,0 PumpA PumpA_pos,0 TIME Ti DOUT X,1,5,15
					PVT Z Zi,0 msShut_ext msShut_close1,0 PumpA PumpA_pos,0 TIME (Ti+8*DT) DOUT X,1,0,15
					Ti = T_0 + 360*DT
					PVT Z Zi+DZ,0 msShut_ext msShut_close1,0 PumpA PumpA_pos,0 TIME (Ti-60*DT) DOUT X,1,0,15
					PVT Z Zi+DZ,0 msShut_ext msShut_close1,0 PumpA PumpA_pos,0 TIME (Ti-8*DT) DOUT X,1,0,15
					PVT Z Zi+DZ,0 msShut_ext msShut_open,0 PumpA PumpA_pos,0 TIME Ti DOUT X,1,5,15
					PVT Z Zi+DZ,0 msShut_ext msShut_close2,0 PumpA PumpA_pos,0 TIME (Ti+8*DT) DOUT X,1,0,15
					T_0 = T_0 + 480*DT
				NEXT i
				Ti = T_0 + 120*DT
				PVT Z Zi+2*DZ,0 msShut_ext msShut_close2,0 PumpA PumpA_pos,0 TIME (Ti-60*DT) DOUT X,1,0,15
				PVT Z Zi+2*DZ,0 msShut_ext msShut_close2,0 PumpA PumpA_pos,0 TIME (Ti-8*DT) DOUT X,1,0,15
				PVT Z Zi+2*DZ,0 msShut_ext msShut_open,0 PumpA PumpA_pos,0 TIME Ti DOUT X,1,5,15
				PVT Z Zi+2*DZ,0 msShut_ext msShut_close1,0 PumpA PumpA_pos,0 TIME (Ti+8*DT) DOUT X,1,0,15
				PVT Z Z_end,0 msShut_ext msShut_close1,0 PumpA PumpA_pos,0 TIME (Ti+120*DT) DOUT X,1,0,15
							
				T_0 = T_0 + (N_steps(j) + 15)*4*DT
				PVT Z Z_start,0 msShut_ext msShut_close1,0 TIME T_0 DOUT X,1,0,15
				'PumpA_Pos = PLANEPOS(PumpA)
		END IF
		
		' Correct phase if necessary
		IF (N_mode > 1) THEN '(Last_Mode = N_mode) AND (N_mode > 0) THEN
			IF k = 0 THEN
				Zpos = 0
				Zpos_sum = 0
				Zpos_sumsq = 0
				counter = 1
				PRINT "N, um, sigma, us\r"
			END IF
			
			Zpos_sum = Zpos_sum+Zpos
			Zpos_sumsq = Zpos_sumsq + Zpos^2
			stdev = sqr(Zpos_sumsq/counter-(Zpos_sum/counter)^2)
			pos_err = Zpos_sum/counter - Z_mid + 0.434 + T_offset*DT*Z_vmax 'tweaked to 0.434 (equivalent to 0.67*DT*Z_vmax)to center rising edge on central slot
			counter = counter+1		
			IF (counter > 32) AND (abs(pos_err) > 3*(0.181/sqr(counter))) THEN 'stdev due to timing jitter is 0.181 mm

				T_correction = pos_err/Z_vmax 'divide pos_err by Z_vmax to convert to time
				T_max = 0.004
				IF (T_correction > T_max) THEN
					T_correction = T_max
				ELSEIF (T_correction < -1*T_max) THEN
					T_correction = -1*T_max
				END IF
				IF PLL = 1 THEN
					FORMAT PrintString, "%d,%.0f,%.3f,%.0f\r",
					INTV:counter,DBLV:1000*pos_err,DBLV:stdev/0.181,DBLV:1000000*pos_err/Z_vmax
					PRINT PrintString
					T_0 = T_0 - T_correction
					Zpos_sum = 0
					Zpos_sumsq = 0
					counter = 1
				END IF
			END IF
		END IF
		
		'PRINT "l = "
		'FORMAT PrintString, "%d\n", INTV:l
		'PRINT PrintString
		
		Last_Mode = N_mode
		k=k+1
		IF j <> Last_Mode THEN
			PRINT "N_mode = "
			FORMAT PrintString, "%d\n", INTV:j
			PRINT PrintString
		END IF
	WEND
	
	LINEAR PumpA 50*(FLOOR(Npp/50)+1) F 20
END PROGRAM

FUNCTION Stepping ()
'Stepping Modes: j = 6 to 9 -> [12,24,36,48] ms dwell times
'	N_steps = 41*3*(N+2)+3(9); N = [0,1,2,3] -> [249,372,495(501),618] steps
'   For N = 2, add 9 steps instead of 3 at end of stroke to make the period divisible by 48 (20.5 Hz operation)
'	
	DIM PrintString AS STRING(80)
	For j = 6 TO 9
		N = j - 6
		Nperiod = 3*(N+2)	'# steps between X-ray pulses
		PVD(j,0).Zp = -1	'Flag to suppress PVT command
		PVD(j,1).Zp = -1
		X_count = 0
		FOR i = 2 to N_steps(j)
			IF FLOOR(i/Nperiod) = CEIL(i/Nperiod) THEN
				'FORMAT PrintString, "%d\r",INTV:i
				'PRINT PrintString
				k = 3*(N+1)
				X_count = X_count+1
				PVD(j,i).X = X_count
				PVD(j,i).L = X_count
				PVD(j,i-k).Zp = X_count
				PVD(j,i-2).Zp = X_count
				PVD(j,i).Zp = X_count
				PVD(j,i+2).Zp = X_count+20/27.0
				PVD(j,i-k).Zv = 0.0
				PVD(j,i-2).Zv = 0.0
				PVD(j,i).Zv = 0.0
				PVD(j,i+2).Zv = 2/3.0
				IF (X_count/2-floor(X_count/2)) = 0 THEN	' even
					PVD(j,i-k).Sp = -1
					PVD(j,i-2).Sp = -1
					PVD(j,i).Sp = 0
					PVD(j,i+2).Sp = 1
					PVD(j,i-k).Sv = 0
					PVD(j,i-2).Sv = 0
					PVD(j,i).Sv = 1
					PVD(j,i+2).Sv = 0
				ELSE
					PVD(j,i-k).Sp = 1
					PVD(j,i-2).Sp = 1
					PVD(j,i).Sp = 0
					PVD(j,i+2).Sp = -1
					PVD(j,i-k).Sv = 0
					PVD(j,i-2).Sv = 0
					PVD(j,i).Sv = -1
					PVD(j,i+2).Sv = 0
				END IF
			END IF
		NEXT i
		PVD(j,N_steps(j)).Zp = 42.0
		PVD(j,N_steps(j)).Zv = 0
	NEXT j

END FUNCTION

FUNCTION Exotic ()
'Exotic Modes: j = 2 to 4 -> [32.4,64.8,129.6] ms delay times
'	N = [0,1,2] -> [375,189,174] steps; [Exotic-32, Exotic-64, Exotic-128]

	FOR j = 2 TO 4
		N = j-2
		Nstroke = 2^(N+2)-3
		Nperiod = 3*2^(N+2)-3
		R0 = Nstroke/Nperiod '(1/9),(5/21),(13/45): (# pulses before reversing/# steps per repeat)
		L_count = 0
		X_count = 0
		PVD(j,0).Zp = -1	'Flag to suppress PVT command
		PVD(j,1).Zp = -1
		FOR i = 2 TO N_steps(j)	'Find L and X and assign values for Zp, Zv, and Sp
			R1 = (i-2)/Nperiod			
			R2 = (i+Nstroke-2)/Nperiod	
			DIFF1 = R1-FLOOR(R1)	'Laser trigger
			DIFF2 = R2-FLOOR(R2)	'X-ray trigger
			PVD(j,i).L = 0
			PVD(j,i).X = 0
			PVD(j,i).Zp = -1
			IF (DIFF1 < (R0-0.001)) AND (L_count < 41) THEN	'constrain # of laser pulses to 41
				L_count = L_count+1
				PVD(j,i).L = L_count
				PVD(j,i).Zp = L_count
				PVD(j,i).Zv = 1.0
			ELSEIF (DIFF2 < (R0-0.001)) AND (X_count < 41) THEN 'constrain # of X-ray pulses to 41 
				X_count = X_count+1
				PVD(j,i).X = X_count
				PVD(j,i).Zp = X_count
				PVD(j,i).Zv = 1.0
				PVD(j,i).Sp = 0.0	'0 is open
			END IF
		NEXT i
		
		'Place start/stop anchor points on either side of Nstroke slots
		'	Separate anchor points by 2 time steps
		FOR i = 2 to N_steps(j)
			Xm = PVD(j,i-1).X
			Xi = PVD(j,i).X
			Xp = PVD(j,i+1).X
			Li = PVD(j,i).L
			Lp = PVD(j,i+1).L
			IF  Li > 0 AND Lp = 0 THEN	' last Laser pulse in stroke
				PVD(j,i+2).Zp = PVD(j,i).Zp + 1
			END IF
			IF  Xi > 0 AND Xm = 0 THEN	' first Xray pulse in stroke
				PVD(j,i-2).Zp = PVD(j,i).Zp - 1
			END IF			
			IF  Xi > 0 AND Xp = 0 THEN	' last Xray pulse in stroke
				IF N = 0 THEN	'Exotic-32
					PVD(j,i+2).Zp = PVD(j,i+1).Zp + 0.75 
					PVD(j,i+2).Zv = 0.5 
					slot = PVD(j,i).Zp
					IF CEIL(slot/2) = FLOOR(slot/2) THEN	' if even
						'shutter transitions from close1 (-1) to close2 (1) in 4 steps 
						PVD(j,i-2).Sp = -1
						PVD(j,i+1).Sp = 27/32.0
						PVD(j,i+2).Sp = 1
						PVD(j,i+3).Sp = 1
						PVD(j,i).Sv = 1
						PVD(j,i+1).Sv = 9/16.0
					ELSE									' if odd
						'shutter transitions from close2 (1) to close1 (-1)in 4 steps 
						PVD(j,i-2).Sp = 1
						PVD(j,i+1).Sp = -27/32.0
						PVD(j,i+2).Sp = -1
						PVD(j,i+3).Sp = -1
						PVD(j,i).Sv = -1
						PVD(j,i+1).Sv = -9/16.0					
					END IF
				ELSE	'Exotic-64 and Exotic-128
					PVD(j,i+1).Sp = -0.5	'shutter transitions from open to close1 in 2 steps
					PVD(j,i+1).Sv = -1	
				END IF
			END IF
			
			Ll  = PVD(j,i).L
			IF Ll = 41 THEN
				IF N = 1 THEN	'Exotic-64
					PVD(j,i+2).Zp = 42.0
					PVD(j,i+1).Zp = 41 + 0.75
					PVD(j,i+1).Zv = 0.5 
				ELSE
					PVD(j,N_steps(j)-2).Zp = 42.0
				END IF
			END IF
			Xi  = PVD(j,i).X
			IF Xi = 41.0 THEN
				PVD(j,i+2).Zp = PVD(j,i).Zp + 1
				IF N = 0 THEN'Exotic-32
					PVD(j,N_steps(j)-1).Zp = 44.0
					PVD(j,i+1).Zv = 0				
				END IF
			END IF
		NEXT i
		
		IF N = 0 THEN	'Exotic-32
			' First move Sp from -1 to 1 in 3 steps (without transmitting xray pulse)
			PVD(j,2).Sp = 13/27.0 			' 2*20/27 - 1
			PVD(j,3).Sp = 1
			PVD(j,4).Sp = 1
			PVD(j,2).Sv = 8/9.0 			' 4/3 * 2/3
			PVD(j,3).Zp = 1 + 0.75 '27/32.0
			PVD(j,3).Zv = 0.5 '9/16.0
			
			' Assign appropriate Z velocity for last close 
			PVD(j,N_steps(j)-3).Zv = 0		
		END IF
		
		PVD(j,N_steps(j)-1).Zp = 42	' Ensure last position is at slot 42
	NEXT j
	
END FUNCTION

FUNCTION Flythru ()
'Fly-thru Mode: j = 5 
'	N_steps = 40 + 2 + 3 = 45
'	2 steps to move from slot 0 to 1; 2 steps to move from slot 41 to 42; hold 1 step at slot 42
	j = 5
	FOR i = 2 TO 42	' Assign positions and velocities for 41 slots
		PVD(j,i).X = 1
		PVD(j,i).L = 1
		PVD(j,i).Zp = i-1
		PVD(j,i).Zv = 1.0
		PVD(j,i).Sp = 0.0
	NEXT i
	PVD(j,44).Zp = 42.0
	PVD(j,44).Sp = -1.0
	PVD(j,45).Zp = 42.0
	PVD(j,45).Sp = -1.0
END FUNCTION

