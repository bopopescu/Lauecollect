
		; **** BCM file generated: Sun, Mar 10 2019, 03:44:01 PM ****

	.ver	200003

	org	p:

		chkdbg
	.ln		18
		pusha		FN_TRIGGER
		pushc_i		$ffffffff
		store_i
		chkdbg
	.ln		19
		pushc_i		$00000000
		pushc_i		$00000001
		int_cmd
		chkdbg
	.ln		20
L14
		pushc_i		$00000000
		int_func
		pushc_i		$00000000
		tgt_i
		brcf		L15
		chkdbg
	.ln		21
		pusha		FN_TRIGGER
		pushv_i		FN_TRIGGER
		pushc_i		$00000001
		add_i
		store_i
		chkdbg
	.ln		22
		pushc_i		$00000001
		startsync_cmd
		chkdbg
	.ln		23
		dclspc		$00000002
		callp		FSYNCH
		chkdbg
	.ln		24
		pusha		FJ
		pushc_d		$00000000 $3ff00000
		store_d
		pusha		_ForNextLimit2
		pushc_d		$00000000 $40490000
		store_d
		pusha		_ForNextStep2
		pushc_d		$00000000 $3ff00000
		store_d
		bra		L18
L16
		pushv_d		FJ
		pushv_d		_ForNextLimit2
		pushv_d		_ForNextStep2
		tfor_d
		brcf		L17
L18
		chkdbg
	.ln		24
		sync_cmd
		pusha		FJ
		pushv_d		FJ
		pushv_d		_ForNextStep2
		add_d
		store_d
		bra		L16
L17
		bra		L14
L15

		chkdbg
	.ln		-1
		end

	.file		0,\\femto\c\all projects\aps\instrumentation\software\lauecollect\ensemble\nih-diffractometer_pp_test.ab
	.def	FSYNCH
	.val	FSYNCH
	.scl	2
	.type	$21
	.endef
FSYNCH
	.bf		32
	.bb		32
	.def	FN_TEMP
	.val	-2
	.scl	1
	.type	$4
	.endef
	.def	FJ
	.val	-1
	.scl	1
	.type	$4
	.endef
		rcrdfp
		chkdbg
	.ln		32
		pusha		FN_LOOP
		pushc_i		$00000000
		store_i
		chkdbg
	.ln		33
		pusha		FVOLT1
		pushc_i		$00000000
		pushc_i		$00000001
		ain_cmd
		cnvt_fd
		store_d
		chkdbg
	.ln		34
		pushc_i		$00000000
		pushc_i		$00000000
		pushc_i		$00000004
		pushc_i		$00000001
		dout_cmd
		chkdbg
	.ln		35
L0
		pushv_d		FVOLT1
		pushc_d		$33333333 $3fe33333
		tlt_d
		cnvt_di
		brcf		L1
		chkdbg
	.ln		36
		sync_cmd
		chkdbg
	.ln		37
		pusha		FVOLT1
		pushc_i		$00000000
		pushc_i		$00000001
		ain_cmd
		cnvt_fd
		store_d
		chkdbg
	.ln		38
		pusha		FN_LOOP
		pushv_i		FN_LOOP
		pushc_i		$00000001
		add_i
		store_i
		bra		L0
L1
		chkdbg
	.ln		40
		pushc_i		$00000000
		pushc_i		$00000000
		pushc_i		$00000003
		pushc_i		$00000001
		dout_cmd
		chkdbg
	.ln		41
		halt_cmd
		chkdbg
	.ln		43
		pusha		FT_OFFSET
		pushc_d		$566cf41f $3fa6ae7d
		pushv_d		FVOLT1
		pushc_d		$00000000 $40080000
		pwr_d
		mpy_d
		pushc_d		$66666667 $3fc66666
		pushv_d		FVOLT1
		pushc_d		$00000000 $40000000
		pwr_d
		mpy_d
		sub_d
		pushc_d		$566cf41f $3fe4ae7d
		pushv_d		FVOLT1
		mpy_d
		add_d
		pushv_d		FT_SHIFT
		sub_d
		store_d
		chkdbg
	.ln		49
		sync_cmd
		chkdbg
	.ln		50
		sync_cmd
		chkdbg
	.ln		51
		sync_cmd
		chkdbg
	.ln		52
		sync_cmd
		chkdbg
	.ln		57
		sync_cmd
		chkdbg
	.ln		58
		sync_cmd
		chkdbg
	.ln		59
		sync_cmd
		chkdbg
	.ln		60
		pusha		FPUMPA_ENABLE
		pushc_i		$00000000
		store_i
		chkdbg
	.ln		61
		pushc_i		$00000000
		pushc_i		$00000001
		ain_cmd
		pushc_f		$3fcccccd
		tgt_f
		cnvt_fi
		brcf		L3
		chkdbg
	.ln		62
		pusha		FPUMPA_ENABLE
		pushc_i		$00000001
		store_i
L3
		chkdbg
	.ln		66
		pushfp
		pushc_i		$fffffffe
		add_i
		pushc_i		$00000000
		lstore_i
		chkdbg
	.ln		67
		pusha		FI
		pushc_d		$00000000 $00000000
		store_d
		pusha		_ForNextLimit0INSYNCH
		pushc_d		$00000000 $40080000
		store_d
		pusha		_ForNextStep0INSYNCH
		pushc_d		$00000000 $3ff00000
		store_d
		bra		L6
L4
		pushv_d		FI
		pushv_d		_ForNextLimit0INSYNCH
		pushv_d		_ForNextStep0INSYNCH
		tfor_d
		brcf		L5
L6
		chkdbg
	.ln		68
		sync_cmd
		chkdbg
	.ln		69
		sync_cmd
		chkdbg
	.ln		70
		sync_cmd
		chkdbg
	.ln		71
		pushc_i		$00000000
		pushc_i		$00000001
		ain_cmd
		pushc_f		$3fcccccd
		tgt_f
		cnvt_fi
		brcf		L8
		chkdbg
	.ln		72
		pushfp
		pushc_i		$fffffffe
		add_i
		pushfp
		pushc_i		$fffffffe
		add_i
		lload_i
		pushc_i		$00000002
		pushv_d		FI
		cnvt_di
		pwr_i
		add_i
		lstore_i
L8
		pusha		FI
		pushv_d		FI
		pushv_d		_ForNextStep0INSYNCH
		add_d
		store_d
		bra		L4
L5
		chkdbg
	.ln		75
		pusha		FN_MODE
		pushfp
		pushc_i		$fffffffe
		add_i
		lload_i
		store_i
		chkdbg
	.ln		78
		pushfp
		pushc_i		$fffffffe
		add_i
		pushc_i		$00000000
		lstore_i
		chkdbg
	.ln		79
		pusha		FI
		pushc_d		$00000000 $00000000
		store_d
		pusha		_ForNextLimit1INSYNCH
		pushc_d		$00000000 $40140000
		store_d
		pusha		_ForNextStep1INSYNCH
		pushc_d		$00000000 $3ff00000
		store_d
		bra		L11
L9
		pushv_d		FI
		pushv_d		_ForNextLimit1INSYNCH
		pushv_d		_ForNextStep1INSYNCH
		tfor_d
		brcf		L10
L11
		chkdbg
	.ln		80
		sync_cmd
		chkdbg
	.ln		81
		sync_cmd
		chkdbg
	.ln		82
		sync_cmd
		chkdbg
	.ln		83
		pushc_i		$00000000
		pushc_i		$00000001
		ain_cmd
		pushc_f		$3fcccccd
		tgt_f
		cnvt_fi
		brcf		L13
		chkdbg
	.ln		84
		pushfp
		pushc_i		$fffffffe
		add_i
		pushfp
		pushc_i		$fffffffe
		add_i
		lload_i
		pushc_i		$00000002
		pushv_d		FI
		cnvt_di
		pwr_i
		add_i
		lstore_i
L13
		pusha		FI
		pushv_d		FI
		pushv_d		_ForNextStep1INSYNCH
		add_d
		store_d
		bra		L9
L10
		chkdbg
	.ln		87
		pusha		FN_CONTROL
		pushfp
		pushc_i		$fffffffe
		add_i
		lload_i
		store_i
		chkdbg
	.ln		88
		pushc_i		$00000000
		pushc_i		$00000000
		pushc_i		$00000002
		pushc_i		$00000001
		dout_cmd
	.eb		92
	.ef		92
		rtn		$00000000		$00000002
	.def	*
	.val	0
	.scl	-1
	.type	$0
	.endef


	org	y:

	.def	FPRINTSTRING
	.val	FPRINTSTRING
	.scl	2
	.dim	25
	.strt	0
	.size	25
	.type	$3c
	.endef
FPRINTSTRING		bsc	25

	org	y:

	.def	FPUMPA_ENABLE
	.val	FPUMPA_ENABLE
	.scl	2
	.type	$4
	.endef
FPUMPA_ENABLE		bsc	1

	org	y:

	.def	FPUMPA_ENABLE_LAST
	.val	FPUMPA_ENABLE_LAST
	.scl	2
	.type	$4
	.endef
FPUMPA_ENABLE_LAST		bsc	1

	org	y:

	.def	FN_MODE
	.val	FN_MODE
	.scl	2
	.type	$4
	.endef
FN_MODE		bsc	1

	org	y:

	.def	FN_MODE_LAST
	.val	FN_MODE_LAST
	.scl	2
	.type	$4
	.endef
FN_MODE_LAST		bsc	1

	org	y:

	.def	FN_LOOP
	.val	FN_LOOP
	.scl	2
	.type	$4
	.endef
FN_LOOP		bsc	1

	org	y:

	.def	FN_TRIGGER
	.val	FN_TRIGGER
	.scl	2
	.type	$4
	.endef
FN_TRIGGER		bsc	1

	org	y:

	.def	FN_CONTROL
	.val	FN_CONTROL
	.scl	2
	.type	$4
	.endef
FN_CONTROL		bsc	1

	org	y:

	.def	FVOLT1
	.val	FVOLT1
	.scl	2
	.type	$7
	.endef
FVOLT1		bsc	2

	org	y:

	.def	FT_OFFSET
	.val	FT_OFFSET
	.scl	2
	.type	$7
	.endef
FT_OFFSET		bsc	2

	org	y:

	.def	FT_SHIFT
	.val	FT_SHIFT
	.scl	2
	.type	$7
	.endef
FT_SHIFT
	dc	$00000000, $bfd00000

	org	y:

	.def	FZ_ERROR
	.val	FZ_ERROR
	.scl	2
	.type	$7
	.endef
FZ_ERROR		bsc	2

	org	y:

	.def	FI
	.val	FI
	.scl	2
	.type	$7
	.endef
FI		bsc	2

	org	y:

	.def	FJ
	.val	FJ
	.scl	2
	.type	$7
	.endef
FJ		bsc	2


	org	y:

	.def	_ForNextLimit0INSYNCH
	.val	_ForNextLimit0INSYNCH
	.scl	20
	.type	$7
	.endef
_ForNextLimit0INSYNCH		bsc	2

	org	y:

	.def	_ForNextStep0INSYNCH
	.val	_ForNextStep0INSYNCH
	.scl	20
	.type	$7
	.endef
_ForNextStep0INSYNCH		bsc	2

	org	y:

	.def	_ForNextLimit1INSYNCH
	.val	_ForNextLimit1INSYNCH
	.scl	20
	.type	$7
	.endef
_ForNextLimit1INSYNCH		bsc	2

	org	y:

	.def	_ForNextStep1INSYNCH
	.val	_ForNextStep1INSYNCH
	.scl	20
	.type	$7
	.endef
_ForNextStep1INSYNCH		bsc	2

	org	y:

	.def	_ForNextLimit2
	.val	_ForNextLimit2
	.scl	20
	.type	$7
	.endef
_ForNextLimit2		bsc	2

	org	y:

	.def	_ForNextStep2
	.val	_ForNextStep2
	.scl	20
	.type	$7
	.endef
_ForNextStep2		bsc	2

