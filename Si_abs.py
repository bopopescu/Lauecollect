"""Linear Absorption coefficient of Silicon as function of X-ray photon energy
in eV. Calculated by XOP / Xpower / CrossSec_XCOM.dat
Friedrich Schotte, 12 Dec 2010
"""
from numpy import array
from scipy.interpolate import UnivariateSpline

E,mu = array([
    # (E[eV], mu [mm^-1])
    (2000, 646.96234130859375),
    (2500, 381.28677368164062),
    (3000, 228.04554748535156),
    (3500, 150.41947937011719),
    (4000, 105.54720306396484),
    (4500, 76.551727294921875),
    (5000, 57.120765686035156),
    (5500, 43.75128173828125),
    (6000, 34.262306213378906),
    (6500, 27.312616348266602),
    (7000, 22.118827819824219),
    (7500, 18.150732040405273),
    (8000, 15.080136299133301),
    (8500, 12.659798622131348),
    (9000, 10.72834300994873),
    (9500, 9.1689062118530273),
    (10000, 7.8940763473510742),
    (10500, 6.8504104614257812),
    (11000, 5.9788374900817871),
    (11500, 5.2507610321044922),
    (12000, 4.6367330551147461),
    (12500, 4.1134486198425293),
    (13000, 3.6667141914367676),
    (13500, 3.2823810577392578),
    (14000, 2.950347900390625),
    (14500, 2.6605360507965088),
    (15000, 2.4088990688323975),
    (15500, 2.1883928775787354),
    (16000, 1.9939867258071899),
    (16500, 1.8216582536697388),
    (17000, 1.6693927049636841),
    (17500, 1.5331747531890869),
    (18000, 1.412997841835022),
    (18500, 1.3048509359359741),
    (19000, 1.2067278623580933),
    (19500, 1.119626522064209),
    (20000, 1.0405411720275879),
    (20500, 0.96846878528594971),
    (21000, 0.90340793132781982),
    (21500, 0.84535723924636841),
    (22000, 0.79131299257278442),
    (22500, 0.74127465486526489),
    (23000, 0.69624233245849609),
    (23500, 0.65521460771560669),
    (24000, 0.61819106340408325),
    (24500, 0.58316999673843384),
    (25000, 0.55115187168121338),
    (25500, 0.52113574743270874),
    (26000, 0.49412205815315247),
    (26500, 0.46911001205444336),
    (27000, 0.44509905576705933),
    (27500, 0.42308950424194336),
    (28000, 0.40308123826980591),
    (28500, 0.38407373428344727),
    (29000, 0.36606699228286743),
    (29500, 0.35006126761436462),
    (30000, 0.3350561261177063),
]).T

Si_mu = UnivariateSpline(E,mu)

if __name__ == "__main__": # for testing
    from pylab import *
    Ei = arange(min(E),max(E),100)
    mui = Si_mu(Ei)
    plot(E,mu,"o",Ei,mui,"-")
    show()
